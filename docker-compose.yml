services:
  kafka:
    image: 'bitnami/kafka:latest'
    networks:
      - seismic-insights-network
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list"]
      interval: 15s
      timeout: 15s
      retries: 8
      start_period: 60s

  influxdb:
    image: influxdb:2.7
    networks:
      - seismic-insights-network
    container_name: seismic-influxdb
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://seismic-influxdb:8086/health || exit 1"]
      interval: 15s
      timeout: 15s
      retries: 8
      start_period: 60s

  batch-pipeline:
    build:
      context: .
      dockerfile: batch_pipeline/Dockerfile
    depends_on:
      influxdb:
        condition: service_healthy
    networks:
      - seismic-insights-network
    ports:
      - '4040:4040'
    environment:
      - INFLUXDB_URL=${INFLUXDB_URL}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 120s

  streaming-pipeline:
    build:
      context: .
      dockerfile: streaming_pipeline/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    cpus: 4
    networks:
      - seismic-insights-network
    ports:
      - '8081:8081'
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_TOPICS=${KAFKA_TOPICS}
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID}
      - KAFKA_SOURCE_NAME=${KAFKA_SOURCE_NAME}
      - INFLUXDB_URL=${INFLUXDB_URL}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
      - MIN_MAGNITUDE=${MIN_MAGNITUDE}
      - JOB_NAME=${JOB_NAME}
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 120s

  event-producer:
    build:
      context: .
      dockerfile: event_producer/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - seismic-insights-network
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - PRODUCE_INTERVAL_SECS=${PRODUCE_INTERVAL_SECS}
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 120s

  grafana:
    image: grafana/grafana-oss:latest
    networks:
      - seismic-insights-network
    container_name: seismic-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-worldmap-panel,grafana-clock-panel,yesoreyeram-boomtheme-panel
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_LOG_LEVEL=debug
      - INFLUXDB_USERNAME=${INFLUXDB_USERNAME}
      - INFLUXDB_PASSWORD=${INFLUXDB_PASSWORD}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      influxdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  influxdb_data:
  influxdb_config:
  grafana_data:

networks:
  seismic-insights-network:
    driver: bridge
